[{"/home/aely/dispensary/src/index.js":"1","/home/aely/dispensary/src/reportWebVitals.js":"2","/home/aely/dispensary/src/Components/App.js":"3","/home/aely/dispensary/src/Components/Landing.js":"4","/home/aely/dispensary/src/Components/Dashboard.js":"5","/home/aely/dispensary/src/Components/Loader.js":"6","/home/aely/dispensary/src/Components/RegistrationForm.js":"7","/home/aely/dispensary/src/Components/CandidateForm.js":"8","/home/aely/dispensary/src/Components/VotedFor.js":"9","/home/aely/dispensary/src/Components/Graphs.js":"10","/home/aely/dispensary/src/Components/Products.js":"11","/home/aely/dispensary/src/utils/loadNetID.js":"12","/home/aely/dispensary/src/utils/loadAccount.js":"13","/home/aely/dispensary/src/utils/loadWeb3.js":"14","/home/aely/dispensary/src/queries/getLiveCoinPrice.js":"15","/home/aely/dispensary/src/queries/getLiveETHUSD.js":"16","/home/aely/dispensary/src/queries/getLiveCoindeskPrice.js":"17","/home/aely/dispensary/src/serviceWorker.js":"18","/home/aely/dispensary/src/Components/Cart.js":"19","/home/aely/dispensary/src/Components/Checkout.js":"20","/home/aely/dispensary/src/Components/ProductDetails/ProductDetails.js":"21","/home/aely/dispensary/src/Components/AddProduct/AddProductRoot.js":"22","/home/aely/dispensary/src/Components/AddProduct/AddTerpenes.js":"23","/home/aely/dispensary/src/Components/AddProduct/AddLocation.js":"24","/home/aely/dispensary/src/Components/AddProduct/ProductInfo.js":"25","/home/aely/dispensary/src/Components/AddProduct/AddCannabinoids.js":"26","/home/aely/dispensary/src/utils/loadContract.js":"27","/home/aely/dispensary/src/Components/ProductDetails/Cannabinoid.js":"28","/home/aely/dispensary/src/Components/ProductDetails/Terpene.js":"29","/home/aely/dispensary/src/Components/CreateLocation.js":"30","/home/aely/dispensary/src/Components/CreateTerpene.js":"31","/home/aely/dispensary/src/Components/CreateCannabinoid.js":"32","/home/aely/dispensary/src/Components/Purchases.js":"33","/home/aely/dispensary/src/utils/loadContract-old.js":"34","/home/aely/dispensary/src/Components/ReceiptDetails.js":"35","/home/aely/dispensary/src/Components/MyNavbar.js":"36"},{"size":864,"mtime":1607900653832,"results":"37","hashOfConfig":"38"},{"size":362,"mtime":1607652618701,"results":"39","hashOfConfig":"38"},{"size":1762,"mtime":1609446928030,"results":"40","hashOfConfig":"38"},{"size":13142,"mtime":1609346243672,"results":"41","hashOfConfig":"38"},{"size":4529,"mtime":1609263274199,"results":"42","hashOfConfig":"38"},{"size":523,"mtime":1605251322294,"results":"43","hashOfConfig":"38"},{"size":3955,"mtime":1609013128783,"results":"44","hashOfConfig":"38"},{"size":1794,"mtime":1605253933861,"results":"45","hashOfConfig":"46"},{"size":1635,"mtime":1605304699240,"results":"47","hashOfConfig":"46"},{"size":3332,"mtime":1605468719009,"results":"48","hashOfConfig":"46"},{"size":7058,"mtime":1609626165727,"results":"49","hashOfConfig":"38"},{"size":208,"mtime":1605130927665,"results":"50","hashOfConfig":"38"},{"size":306,"mtime":1605120486790,"results":"51","hashOfConfig":"38"},{"size":386,"mtime":1605120481482,"results":"52","hashOfConfig":"38"},{"size":294,"mtime":1605463313897,"results":"53","hashOfConfig":"46"},{"size":249,"mtime":1605464097678,"results":"54","hashOfConfig":"38"},{"size":353,"mtime":1607901748726,"results":"55","hashOfConfig":"38"},{"size":5344,"mtime":1605109507398,"results":"56","hashOfConfig":"38"},{"size":2236,"mtime":1608754828491,"results":"57","hashOfConfig":"38"},{"size":3536,"mtime":1608754702713,"results":"58","hashOfConfig":"38"},{"size":5348,"mtime":1609263324872,"results":"59","hashOfConfig":"38"},{"size":6633,"mtime":1609732842205,"results":"60","hashOfConfig":"38"},{"size":3348,"mtime":1609624771879,"results":"61","hashOfConfig":"38"},{"size":2700,"mtime":1609261489731,"results":"62","hashOfConfig":"38"},{"size":3041,"mtime":1609261454310,"results":"63","hashOfConfig":"38"},{"size":3449,"mtime":1609625190628,"results":"64","hashOfConfig":"38"},{"size":219,"mtime":1608744122124,"results":"65","hashOfConfig":"38"},{"size":1102,"mtime":1608334750588,"results":"66","hashOfConfig":"38"},{"size":1762,"mtime":1608321581681,"results":"67","hashOfConfig":"38"},{"size":4070,"mtime":1608743503653,"results":"68","hashOfConfig":"38"},{"size":2834,"mtime":1608743514889,"results":"69","hashOfConfig":"38"},{"size":2455,"mtime":1609625182748,"results":"70","hashOfConfig":"38"},{"size":4022,"mtime":1608965181638,"results":"71","hashOfConfig":"38"},{"size":219,"mtime":1608743096175,"results":"72","hashOfConfig":"46"},{"size":2104,"mtime":1608997757798,"results":"73","hashOfConfig":"38"},{"size":1777,"mtime":1609446828852,"results":"74","hashOfConfig":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},"glsp4g",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"6dckan",{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"95"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"95"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"78"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"78"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"78"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"78"},"/home/aely/dispensary/src/index.js",["171","172","173","174"],"import React from 'react';\nimport reportWebVitals from './reportWebVitals'\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './CSS/StyleSheet1.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport {\n  RecoilRoot,\n  atom,\n  selector,\n  useRecoilState,\n  useRecoilValue,\n} from 'recoil';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n      <RecoilRoot>\n        <App />\n      </RecoilRoot>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\nif (module.hot) {\n    module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nreportWebVitals();\n",["175","176"],"/home/aely/dispensary/src/reportWebVitals.js",[],"/home/aely/dispensary/src/Components/App.js",["177","178","179","180","181"],"import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport {\n  RecoilRoot,\n  atom,\n  selector,\n  useRecoilState,\n  useRecoilValue,\n} from 'recoil';\n\nimport Dashboard from './Dashboard'\nimport Landing from './Landing'\nimport Loader from './Loader'\nimport ProductDetails from './ProductDetails/ProductDetails'\nimport Products from './Products'\nimport Checkout from './Checkout'\nimport AddProductRoot from './AddProduct/AddProductRoot'\nimport CreateLocation from './CreateLocation'\nimport CreateTerpene from './CreateTerpene'\nimport CreateCannabinoid from './CreateCannabinoid'\nimport Purchases from './Purchases'\nimport RegistrationForm from './RegistrationForm'\nimport MyNavbar from './MyNavbar'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <React.Fragment>\n          <MyNavbar />\n        <Switch>\n          <Route component={Landing} exact path=\"/\" />\n          <Route component={Dashboard} path=\"/Dashboard\" />\n          <Route component={Loader} path=\"/loader\" />\n          <Route component={ProductDetails} path=\"/product/:productId\" />\n          <Route component={Products} path=\"/products\" />    \n          <Route component={Checkout} path=\"/checkout\" />\n          <Route component={AddProductRoot} path=\"/addproduct\" />\n          <Route component={CreateLocation} path=\"/addlocation\" />\n          <Route component={CreateCannabinoid} path=\"/addcannabinoid\" />\n          <Route component={CreateTerpene} path=\"/addterpene\" />\n          <Route component={Purchases} path=\"/mypurchases\" />\n          <Route component={RegistrationForm} path=\"/registercustomer\" />\n        </Switch>\n        </React.Fragment>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","/home/aely/dispensary/src/Components/Landing.js",["182","183","184","185"],"import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport loadWeb3 from '../utils/loadWeb3'\nimport loadAccount from '../utils/loadAccount'\nimport { Link } from 'react-router-dom'\nimport { Table, Button } from 'reactstrap'\nimport img1 from '../Images/Metamask.png'\nimport img2 from '../Images/Metamask2.png'\nimport img3 from '../Images/Metamask3.png'\nimport Ethereum from '../Images/Ethereum.jpg'\nimport Bitcoin from '../Images/Bitcoin.jpg'\nimport getLiveETHUSD from '../queries/getLiveETHUSD'\nimport loadNetID from '../utils/loadNetID'\nimport getLiveCoindeskPrice from '../queries/getLiveCoindeskPrice'\nimport Dispensary from '../abis/Dispensary.json'\nimport step1 from '../Images/Step1.jpg'\nimport step2 from '../Images/Step2.jpg'\nimport step3 from '../Images/Step3.jpg'\nimport step4 from '../Images/Step4.jpg'\nimport step5 from '../Images/Step5.jpg'\nimport step6 from '../Images/Step6.jpg'\nimport EtherLogo from '../Images/EtherLogo.png'\n  \n\n\nexport default class Dashboard extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            tabId: 0,\n            account: '',\n            dispensary: null,\n            bitcoinPrice: 0,\n            ethereumPrice: 0,\n            networkId: 0,\n            path: '',\n            coinDeskPrice: 0\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            await loadWeb3();\n            const account = await loadAccount();\n            const networkId = await loadNetID();\n            this.setState({\n                account, networkId\n            })\n            const bitcoinPrice = await getLiveCoindeskPrice();\n            this.setState({\n                bitcoinPrice\n            })\n            const ethereumPrice = await getLiveETHUSD();\n            this.setState({\n                ethereumPrice\n            })\n            console.log(this.state)\n        }\n        catch(error) {\n            console.log(error);\n        }\n    }\n\n    incrementTab = () => {\n        this.setState({\n            tabId: this.state.tabId + 1\n        })\n    }\n\n    decrementTab = () => {\n        this.setState({\n            tabId: this.state.tabId - 1\n        })\n    }\n\n    setPath = (path) => {\n        this.setState({\n            path: path,\n            tabId: this.state.tabId + 1\n        })\n    }\n\n    renderMobilePC = () => {\n        return(\n            <div>\n                <h4>\n                    Are you currently using a <br /> \n                    <a href='#' onClick={this.setPath.bind(this, 'Mobile')} >Mobile Device</a> <br />\n                    Or are you using a <br />\n                    <a href='#' onClick={this.setPath.bind(this, 'PC')} >Dekstop/Laptop</a>\n                </h4>\n            </div>\n        )\n    }\n\n    renderCoinbaseWallet = () => {\n        return(\n            <div>\n                <h3>Android: <a href='https://play.google.com/store/apps/details?id=org.toshi' target='_blank' rel=\"noreferrer\" style={{fontSize: '24px', marginBottom: '10px'}}>Coinbase Wallet for Android</a></h3>\n                <h3>iPhone: <a href='https://apps.apple.com/us/app/coinbase-wallet/id1278383455' target='_blank' rel=\"noreferrer\" style={{fontSize: '24px', marginBottom: '10px'}}>Coinbase Wallet for iPhone</a></h3>\n                <h5>You will need to get the wallet set up, create a pin, either back up the phrase or not, etc. Once complete, you will need to do the following:</h5>\n                <h3>Step 1: </h3><img src={step1} alt='step1' style={{maxHeight: '400px', maxWidth: window.screen.availWidth, marginLeft: 'auto', marginRight: 'auto'}} />\n                <h3>Step 2: </h3><img src={step2} alt='step2' style={{maxHeight: '400px', maxWidth: window.screen.availWidth, marginLeft: 'auto', marginRight: 'auto'}} />\n                <h3>Step 3: </h3><img src={step3} alt='step3' style={{maxHeight: '400px', maxWidth: window.screen.availWidth, marginLeft: 'auto', marginRight: 'auto'}} />\n                <h3>Step 4: </h3><img src={step4} alt='step4' style={{maxHeight: '400px', maxWidth: window.screen.availWidth, marginLeft: 'auto', marginRight: 'auto'}} />\n                <h3>Step 5: </h3><img src={step5} alt='step5' style={{maxHeight: '400px', maxWidth: window.screen.availWidth, marginLeft: 'auto', marginRight: 'auto'}} />\n                <h3>Step 6: </h3><img src={step6} alt='step6' style={{maxHeight: '400px', maxWidth: window.screen.availWidth, marginLeft: 'auto', marginRight: 'auto'}} />\n                <h3 style={{backgrounColor: 'red'}}>After setting the active network to Gorli, you will need to refresh the page</h3>\n                <Button onClick={this.decrementTab} color='danger' style={{margin: '0 auto', marginRight: '5px', marginLeft: '5px', marginTop: '5px'}} >Go Back</Button>\n                <Button onClick={this.incrementTab} color='success' style={{margin: '0 auto', marginTop: '10px'}} >I Have Coinbase Wallet</Button>\n            </div>\n        )\n    }\n\n    renderMetamaskLink = () => {\n        return(\n            <div style={{textAlign: 'center'}} >\n                <h3>You will need MetaMask in order to participate. It is a simple browser extension and can be found here:</h3> \n                <br />\n                <a href='https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn' target='_blank' rel=\"noreferrer\" style={{fontSize: '24px', marginBottom: '10px'}} >MetaMask</a>\n                <br />\n                <img src={img1} alt='Metamask' style={{marginLeft: 'auto', marginRight: 'auto', borderStyle: 'solid', borderColor: 'black', borderWidth: '3px', marginTop: '10px', maxWidth: window.screen.availWidth}} />\n                <br />\n                <h3 style={{marginTop: '10px', backgroundColor: 'red'}} >If you do not have a wallet phrase to import, just create a new wallet.</h3>\n                <Button onClick={this.decrementTab} color='danger' style={{margin: '0 auto', marginRight: '5px', marginLeft: '5px', marginTop: '5px'}} >Go Back</Button>\n                <Button onClick={this.incrementTab} color='success' style={{margin: '0 auto', marginTop: '10px'}} >I Have Metamask</Button>\n            </div>\n        )\n    }\n\n    renderKovanMobileFailure = () => {\n        return(\n            <div>\n                <h3 style={{backgroundColor: 'red'}}>You are not connected to the Kovan Network <br /> \n                Please go back the to previous page for instructions on how to do this. <br />\n                After changing networks, you will need to refresh the browser page.</h3>\n                <br />\n                <Button onClick={this.decrementTab} color='danger' style={{margin: '0 auto', marginRight: '5px', marginLeft: '5px', marginTop: '5px'}} >Go Back</Button>\n            </div>\n        )\n    }\n\n    renderKovanPCFailure = () => {\n        return(\n            <div>\n                <h3>You will need to set metamask to the Kovan Network</h3>\n                <br />\n                {this.state.networkId !== 5 && <h3 style={{backgroundColor: 'red'}} >You are not connected to the correct network <br /> Please connect to the Kovan network and refresh the page</h3>}\n                <h5>Step 1:</h5>\n                <br />\n                <img src={img2} alt='Metamask 2' style={{marginLeft: 'auto', marginRight: 'auto', borderStyle: 'solid', borderColor: 'black', borderWidth: '3px', marginTop: '10px', maxWidth: window.screen.availWidth}} />\n                <br />\n                <h5>Step 2:</h5>\n                <br />\n                <img src={img3} alt='Metamask 3' style={{marginLeft: 'auto', marginRight: 'auto', borderStyle: 'solid', borderColor: 'black', borderWidth: '3px', marginTop: '10px', maxWidth: window.screen.availWidth}} />\n                <br />\n                <h3 style={{backgroundColor: 'red', marginTop: '5px'}} >You are currently not connected to the Kovan Network, please follow the above instructions and refresh the page</h3>\n                <Button onClick={this.decrementTab} color='danger' style={{margin: '0 auto', marginRight: '5px', marginLeft: '5px', marginTop: '5px'}} >Go Back</Button>\n                {this.state.networkId === 5 && <Button onClick={this.incrementTab} color='success' style={{margin: '0 auto', marginRight: '5px', marginLeft: '5px', marginTop: '5px'}} >I am on Goerli</Button>}\n            </div>\n        )\n    }\n\n    renderKovanSuccess = () => {\n        return(\n            <div>\n                <h3 style={{backgroundColor: 'green'}}>You are currently connected to the Kovan Network, please proceed to get funds</h3>\n                <Button onClick={this.decrementTab} color='danger' style={{margin: '0 auto', marginRight: '5px', marginLeft: '5px', marginTop: '5px'}} >Go Back</Button>\n                {this.state.networkId === 42 && <Button onClick={this.incrementTab} color='success' style={{margin: '0 auto', marginRight: '5px', marginLeft: '5px', marginTop: '5px'}} >Proceed</Button>}\n            </div>\n        )\n    }\n\n    renderLink = () => {\n        return(\n            <div style={{textAlign: 'center', justifyContent: 'center'}} >\n                <h3>Copy this value:</h3> \n                <br />\n                {this.state.account !== null && this.state.account !== '' && <strong style={{fontSize: '30px', backgroundColor: 'yellow'}} >{this.state.account}</strong>}\n                {this.state.account === null && <strong style={{fontSize: '30px', backgroundColor: 'red'}} >Your wallet is not connected. Refresh the page and try again.</strong>} \n                {this.state.account === '' && <strong style={{fontSize: '30px', backgroundColor: 'red'}} >Your wallet is not connected. Refresh the page and try again.</strong>} \n                <br />\n                <br />\n                <h3>into the input field on the page of the below link to request funds!</h3>\n                <h1><a href='https://goerli-faucet.slock.it/' target='_blank' rel=\"noreferrer\"  >Goerli Faucet</a></h1>\n                <br />\n                <Button onClick={this.decrementTab} color='danger' style={{margin: '0 auto', marginTop: '5px', marginRight: '5px', marginLeft: '5px'}} >Go Back</Button>\n                <Button onClick={this.incrementTab} color='success' style={{margin: '0 auto', marginTop: '5px', marginRight: '5px', marginLeft: '5px'}} >I Have Funds</Button>\n            </div>\n        )\n    }\n\n    renderTipTable = () => {\n        return(\n            <Table striped>\n                <thead>\n                    <tr>\n                        <th>Crypto Coin</th>\n                        <th>QR Code</th>\n                        <th>Exchange Rate</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>BTC</td>\n                        <td><img src={Bitcoin} alt='bitcoin' style={{marginLeft: 'auto', marginRight: 'auto', marginTop: '10px', height: '20%', maxWidth: window.screen.availWidth}} /></td>\n                        <td> ${this.state.bitcoinPrice} </td>\n                    </tr>\n                    <tr>\n                        <td>ETH</td>\n                        <td><img src={Ethereum} alt='ethereum' style={{marginLeft: 'auto', marginRight: 'auto', marginTop: '10px', height: '20%', maxWidth: window.screen.availWidth}} /></td>\n                        <td> ${this.state.ethereumPrice} </td>\n                    </tr>\n                </tbody>\n            </Table>\n        )\n    }\n    \n    render() {\n        \n          return(\n            <div style={{marginLeft: '5%', marginRight: '5%', marginTop: '3%', textAlign: 'center', backgroundImage: `url(${EtherLogo})`, backgroundPosition: 'center', backgroundSize: 'contain'}} >\n                <h1 style={{textAlign: 'center'}}>Welcome to The Source</h1>\n                <br />\n                <h3>This app is a dispensary user managerment and POS system that runs on the Ethereum Blockchain</h3>\n                <br />\n                <div style={{textAlign: 'center'}} >\n                    {this.state.tabId === 0 && this.renderMobilePC()}\n                    {this.state.tabId === 1 && this.state.path === 'PC' && this.renderMetamaskLink()}\n                    {this.state.tabId === 1 && this.state.path === 'Mobile' && this.renderCoinbaseWallet()}\n                    {this.state.tabId === 2 && this.state.networkId === 42 && this.renderKovanSuccess()}\n                    {this.state.tabId === 2 && this.state.networkId !== 42 && this.state.path === 'Mobile' && this.renderKovanMobileFailure()}\n                    {this.state.tabId === 2 && this.state.networkId !== 42 &&  this.state.path === 'PC' && this.renderKovanPCFailure()}\n                    {this.state.tabId === 3 && this.renderLink()}\n                    {this.state.tabId === 4 && <Link to='/Dashboard'\n                                                 style={{fontSize: '40px'}}\n                                                >\n                                                Proceed to Store</Link>}\n                    {this.state.tabId === 4 && <h3 style={{textAlign: 'center', marginTop: '5%'}}>Tips Appreciated </h3>}\n                    {this.state.tabId === 4 && this.renderTipTable()}\n                </div>\n            </div>\n        )\n    }\n}","/home/aely/dispensary/src/Components/Dashboard.js",[],"/home/aely/dispensary/src/Components/Loader.js",[],"/home/aely/dispensary/src/Components/RegistrationForm.js",[],"/home/aely/dispensary/src/Components/CandidateForm.js",[],["186","187"],"/home/aely/dispensary/src/Components/VotedFor.js",["188","189","190","191","192"],"import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Row, Col, Card, CardTitle, CardText } from 'reactstrap'\n\nexport default class Candidates extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            candidate: []      \n        }\n    }\n\n    async componentDidMount() {\n        try {\n            const candidate = this.getVotedFor();\n            this.setState({\n                candidate\n            })\n        } catch(error) {\n            console.log(error)\n        }\n    }\n\n    getVotedFor = () => {\n        console.log(this.props.Candidates)\n        let array = this.props.Candidates.filter(prop => {\n            return prop.id.includes(this.props.candidateId)\n        })\n        console.log(array[0])\n        return array[0]\n    }\n\n    render() {\n        return(\n            <div>\n                <h1 style={{textAlign: 'center', marginBottom: '5%'}} >You voted for:</h1>  \n                    <Row style={{display: 'block', margin: 'auto', width: 'fit-content'}} key={this.state.candidate.id} >\n                        <Col sm=\"20\">\n                            <Card body>\n                                <CardTitle style={{textAlign: 'center'}} >{this.state.candidate.name}</CardTitle>\n                                \n                                <CardText>{this.state.candidate.party}</CardText>\n                                \n                                <CardText>{this.state.candidate.voteCount}</CardText>\n                            </Card>\n                        </Col>\n                    </Row>\n            </div>\n        )\n    }\n}","/home/aely/dispensary/src/Components/Graphs.js",["193"],"import React, { Component } from 'react';\nimport { PieChart, Pie, Legend, Sector, Cell } from 'recharts';\n\nlet COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n\nlet renderActiveShape = (props) => {\n    let RADIAN = Math.PI / 180;\n    let {\n      cx, cy, midAngle, innerRadius, outerRadius, startAngle, endAngle,\n      fill, payload, percent, value,\n    } = props;\n    let sin = Math.sin(-RADIAN * midAngle);\n    let cos = Math.cos(-RADIAN * midAngle);\n    let sx = cx + (outerRadius + 10) * cos;\n    let sy = cy + (outerRadius + 10) * sin;\n    let mx = cx + (outerRadius + 30) * cos;\n    let my = cy + (outerRadius + 30) * sin;\n    let ex = mx + (cos >= 0 ? 1 : -1) * 22;\n    let ey = my;\n    let textAnchor = cos >= 0 ? 'start' : 'end';\n  \n    return (\n      <g>\n        <text x={cx} y={cy} dy={8} textAnchor=\"middle\" fill={fill}>{payload.name}</text>\n        <Sector\n          cx={cx}\n          cy={cy}\n          innerRadius={innerRadius}\n          outerRadius={outerRadius}\n          startAngle={startAngle}\n          endAngle={endAngle}\n          fill={fill}\n        />\n        <Sector\n          cx={cx}\n          cy={cy}\n          startAngle={startAngle}\n          endAngle={endAngle}\n          innerRadius={outerRadius + 6}\n          outerRadius={outerRadius + 10}\n          fill={fill}\n        />\n        <path d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`} stroke={fill} fill=\"none\" />\n        <circle cx={ex} cy={ey} r={2} fill={fill} stroke=\"none\" />\n        <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} textAnchor={textAnchor} fill=\"#333\">{`${value}`}</text>\n        <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} dy={18} textAnchor={textAnchor} fill=\"#999\">\n          {`(${(percent * 100).toFixed(2)}%)`}\n        </text>\n      </g>\n    );\n  };\n\nclass MyPieChart extends Component {\n\n    constructor(props) {\n        super(props);\n            this.state = {\n                bidenVotes: this.props.bidenVotes,\n                trumpVotes: this.props.trumpVotes,\n                joVotes: this.props.joVotes,\n                totalVotes: this.props.totalVotes,\n                activeIndex: 0\n            }\n        }\n\n    onPieEnter = (data, index, e) => {\n        this.setState({\n          activeIndex: index,\n        });\n      };\n\n    render() {\n        const { bidenVotes, trumpVotes, joVotes } = this.state;\n        let data = [\n            { name: 'Joe Biden', value: parseInt(`${bidenVotes}`)},\n            { name: 'Donald Trump', value: parseInt(`${trumpVotes}`)},\n            { name: 'Jo Jorgensen', value: parseInt(`${joVotes}`)}\n        ];\n        console.log(data)\n        return(\n            <PieChart height={400} width={400} style={{margin: '0 auto'}}>\n            <Pie\n            activeIndex={this.state.activeIndex}\n            activeShape={renderActiveShape}\n            data={data}\n            cx={200}\n            cy={200}\n            innerRadius={60}\n            outerRadius={80}\n            paddingAngle={5}\n            dataKey=\"value\"\n            nameKey=\"name\"\n            onMouseEnter={this.onPieEnter}\n            >\n                {data.map((entry, index) => {\n                    return (\n                        <Cell key={`slice-${index}`} fill={COLORS[index % COLORS.length]}/> \n                    )})}\n            </Pie>\n            </PieChart>\n        )\n    }\n}\n\nexport default MyPieChart;","/home/aely/dispensary/src/Components/Products.js",["194","195","196","197","198","199"],"import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Row, Col, Card, CardTitle, CardText } from 'reactstrap'\nimport { Link } from 'react-router-dom'\nimport loadContract from '../utils/loadContract'\nimport loadWeb3 from '../utils/loadWeb3'\nimport Cart from './Cart'\nimport { FaCartPlus } from 'react-icons/fa'\n\nexport default class Products extends Component {\n\n    constructor(props) {\n        super(props)\n        console.log(this.props)\n        this.state = {\n            dispensary: null,\n            account: '',\n            products: [],\n            cart: [],\n            loading: false,\n            totalCost: 0,\n            isCollapsed: true\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            await loadWeb3()\n            const dispensary = await loadContract()\n            const productCount = await dispensary.methods.productCount().call()\n            for(let i = 1; i <= productCount; i++) {\n                const product = await dispensary.methods.fetchProduct(i).call()\n                //const newValue = await this.getLocationName(product._locations[0])\n                console.log(product)\n                this.setState({ products: [...this.state.products, product]})\n            }\n            console.log(this.state.products)\n            this.setState({ dispensary, productCount })\n        } catch(error) {\n            console.log(error)\n        }\n    }\n\n    getProduct = async (_id) => {\n        const product = await this.state.dispensary.methods.fetchProduct(_id).call()\n        setTimeout(() => { this.setState({ product }); }, 100);\n    }\n\n    getLocationName = async (_id) => {\n        const name = await this.state.dispensary.methods.location(_id).call()\n        return name.nickname\n    }\n\n    removeFromCart = (id) => {\n        this.setState({ loading: true })\n        let newCart = this.state.cart\n        let index = newCart.findIndex(x => x.id === id);\n        newCart.splice(index, 1)\n        this.setState({\n            cart: newCart\n        })\n        setTimeout(() => { this.setState({ loading: false}) }, 200)\n        this.updateTotalCost()\n    }\n\n    addToCart = (id, name, catName, cost, quantity) => {\n        this.setState({ loading: true })\n        let item = { id, name, catName, cost, quantity }\n        let newCart = this.state.cart\n        let index = newCart.findIndex(x => x.id === id);\n        console.log(index)\n        if (index >= 0) {\n            newCart[index].quantity = newCart[index].quantity + quantity\n            this.setState({cart: newCart})\n            this.updateTotalCost()\n            console.log('updated existing item')\n            }\n        if (index < 0 && newCart.length >= 1) {\n            this.setState({ cart: [...this.state.cart, item]})\n            setTimeout(() => {this.updateTotalCost()}, 100)\n            console.log('new item added')\n            }\n        if (index < 0 && newCart.length === 0) {\n            this.setState({ cart: [...this.state.cart, item] })\n            setTimeout(() => {this.setState({ totalCost: cost * quantity})}, 100)\n            console.log('first item')\n            }\n        setTimeout(() => { this.setState({ loading: false}) }, 500)\n    }\n\n    updateTotalCost = async () => {\n        let totalCost = 0\n        for(let i = 0; i < this.state.cart.length; i++) {\n            let cart = this.state.cart\n            totalCost = parseInt(totalCost) + (parseInt(cart[i].cost) * parseInt(cart[i].quantity))\n        }\n        this.setState({ totalCost })\n    }\n\n    handleCollapsed = () => {\n        this.setState({ isCollapsed: !this.state.isCollapsed })\n    }\n    \n    renderCart() {\n        return(\n            <React.Fragment>\n                <a href='#' onClick={this.handleCollapsed}>\n                <FaCartPlus />\n                {this.state.cart.length}\n                </a>\n                <Cart cart={this.state.cart} totalCost={this.state.totalCost} action1={this.removeFromCart} />\n                <Link to={{\n                pathname: '/checkout',\n                state: {\n                        cart: this.state.cart,\n                        totalCost: this.state.totalCost\n                    }\n                }} >\n                    Checkout\n                </Link>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        return(\n            <div style={{marginTop: '3%'}}>\n                <h2 style={{textAlign: 'center', marginBottom: '5%'}}>Available Products</h2>\n                {this.state.products.map(a => {\n                    return(\n                        <Row style={{display: 'inline-block', marginLeft: '10%', marginRight: '10%'}} key={a.productProfile.productId} >\n                            <Col sm=\"20\" >\n                                <Card body>\n\n                                    <CardTitle style={{textAlign: 'center'}} ><Link to={`/product/${a.productProfile.productId}`}>{a.name}</Link></CardTitle>\n                                    \n                                    <CardText>{a.categoryName}</CardText>\n                                    \n                                    <CardText>{a.quantity}</CardText>\n                                    \n                                    <CardText>${a.productCost} per gram</CardText>\n\n                                    {this.state.loading === false && <Button color='success' onClick={this.addToCart.bind(this, a.productProfile.productId, a.name, a.categoryName, a.productCost, 1)}>1 Gram</Button>}\n                                    {this.state.loading === false && <Button color='success' onClick={this.addToCart.bind(this, a.productProfile.productId, a.name, a.categoryName, a.productCost, 3)}>1/8</Button>}\n                                    {this.state.loading === false && <Button color='success' onClick={this.addToCart.bind(this, a.productProfile.productId, a.name, a.categoryName, a.productCost, 7)}>1/4</Button>}\n                                    {this.state.loading === false && <Button color='success' onClick={this.addToCart.bind(this, a.productProfile.productId, a.name, a.categoryName, a.productCost, 14)}>1/2</Button>}\n                                    {this.state.loading === false && <Button color='success' onClick={this.addToCart.bind(this, a.productProfile.productId, a.name, a.categoryName, a.productCost, 28)}>1 Oz</Button>}\n\n                                </Card>\n                            </Col>\n                        </Row>\n                    )\n                })}\n                {!this.state.isCollapsed && \n                <div style={{marginLeft: 'auto', marginRight: 'auto', textAlign: 'center'}} >\n                    <a href='#' onClick={this.handleCollapsed}>\n                        Cart {'\\u00A0'}\n                    <FaCartPlus />\n                    {this.state.cart.length}\n                    </a>\n                </div>} \n                {this.state.isCollapsed && this.state.cart.length > 0 && <div style={{maxWidth: '30%', marginLeft: 'auto', marginRight: 'auto'}}>{this.renderCart()}</div>}\n            </div>\n        )\n    }\n}","/home/aely/dispensary/src/utils/loadNetID.js",["200"],"import Web3 from 'web3'\n\nexport default async function loadNetID() {\n    const web3 = window.web3\n        const networkId = await web3.eth.net.getId()\n        console.log(networkId)\n        return networkId\n}","/home/aely/dispensary/src/utils/loadAccount.js",["201"],"import Web3 from 'web3'\n\nexport default async function loadAccount() {\n    const web3 = window.web3\n        // Load account\n        const account = await web3.eth.getAccounts()\n        console.log(account)\n        const userAccount = account[0]\n        console.log(userAccount)\n        return userAccount\n}","/home/aely/dispensary/src/utils/loadWeb3.js",[],"/home/aely/dispensary/src/queries/getLiveCoinPrice.js",[],"/home/aely/dispensary/src/queries/getLiveETHUSD.js",[],"/home/aely/dispensary/src/queries/getLiveCoindeskPrice.js",[],"/home/aely/dispensary/src/serviceWorker.js",[],"/home/aely/dispensary/src/Components/Cart.js",["202","203"],"import React, { Component } from 'react'\nimport { Button, Row, Col, Table } from 'reactstrap'\n\nexport default class Products extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n    }\n    \n    render() {\n        return(\n                <Table striped>\n                    <thead>\n                        <tr>\n                            <th>\n                                Item Name\n                            </th>\n                            <th>\n                                Item Category\n                            </th>\n                            <th>\n                                Item Cost\n                            </th>\n                            <th>\n                                Item Quantity\n                            </th>\n                        </tr>\n                    </thead>                   \n                {this.props.cart.map(item => {\n                    return(\n                        <tbody key={item.id} >\n                            <tr>\n                                <td>\n                                    {item.name}\n                                </td>\n                                <td>\n                                    {item.catName}\n                                </td>\n                                <td>\n                                    {item.cost}\n                                </td>\n                                <td>\n                                    {item.quantity}\n                                </td>\n                                <td>\n                                    <Button color='danger' onClick={this.props.action1.bind(this, item.id)}>Remove</Button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    )\n                })}\n                <tbody>\n                    <tr>\n                            <td>\n                                Total Cost:\n                            </td>\n                            <td>\n                                ${parseFloat(this.props.totalCost).toFixed(2)}\n                            </td>\n                    </tr>\n                </tbody>\n            </Table>\n        )\n    }\n}","/home/aely/dispensary/src/Components/Checkout.js",["204","205","206","207","208","209","210","211","212"],"import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Row, Col, Card, CardTitle, CardText } from 'reactstrap'\nimport loadAccount from '../utils/loadAccount'\nimport Loader from './Loader'\nimport getLiveETHUSD from '../queries/getLiveETHUSD'\nimport loadContract from '../utils/loadContract'\nimport loadWeb3 from '../utils/loadWeb3'\nimport Cart from './Cart'\n\nexport default class Checkout extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            dispensary: null,\n            account: '',\n            cart: this.props.location.state.cart || [],\n            loading: false,\n            totalCost: this.props.location.state.totalCost || 0\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            await loadWeb3()\n            const account = await loadAccount()\n            const dispensary = await loadContract()\n            this.setState({ dispensary, account })\n            console.log(this.state.cart)\n        } catch(error) {\n            console.log(error)\n        }\n    }\n\n    updateTotalCost = async () => {\n        let totalCost = 0\n        for(let i = 0; i < this.state.cart.length; i++) {\n            let cart = this.state.cart\n            totalCost = parseInt(totalCost) + (parseInt(cart[i].cost) * parseInt(cart[i].quantity))\n        }\n        this.setState({ totalCost })\n    }\n\n    removeFromCart = (id) => {\n        this.setState({ loading: true })\n        let newCart = this.state.cart\n        if (newCart.length === 1) {\n            this.props.history.push('/products')\n        }\n        if (newCart.length >= 1) {\n            let index = newCart.findIndex(x => x.id === id);\n            newCart.splice(index, 1)\n            this.setState({\n                cart: newCart\n            })\n            setTimeout(() => { this.setState({ loading: false}) }, 200)\n            this.updateTotalCost()\n        }\n    }\n\n    getProductsArray = async () => {\n        let ids = [];\n        for(let i = 0; i < this.state.cart.length; i++) {\n            ids.push(this.state.cart[i].id)\n        }\n        return ids\n    }\n\n    getQuantitiesArray = async () => {\n        let quantities = [];\n        for(let i = 0; i < this.state.cart.length; i++) {\n            quantities.push(this.state.cart[i].quantity)\n        }\n        return quantities\n    }\n\n    purchase = async () => {\n        try {\n            const products = await this.getProductsArray()\n            const quantities = await this.getQuantitiesArray()\n            const conversion = await getLiveETHUSD()\n            console.log(conversion)\n            console.log(this.state.totalCost / conversion)\n            const total = window.web3.utils.toWei(`${this.state.totalCost}`, 'Finney')\n            this.setState({ loading: true })\n            await this.state.dispensary.methods.purchaseProducts(products, quantities, 1).send({ from: this.state.account, value: total });\n            this.props.history.push('/products')\n        } catch (error) {\n            console.log(error)\n            this.setState({ loading: false })\n        }\n    }\n    \n    render() {\n        return(\n            <div style={{display: 'block', maxWidth: '70%'}} >\n               {!this.state.loading && <Cart cart={this.state.cart} totalCost={this.state.totalCost} action1={this.removeFromCart} />}\n               {!this.state.loading && <Button color='success' onClick={this.purchase.bind(this)}>Purchase</Button>}  \n               {this.state.loading && <Loader />} \n            </div>\n        )\n    }\n}","/home/aely/dispensary/src/Components/ProductDetails/ProductDetails.js",["213","214","215"],"import React, { Component } from 'react'\nimport { Button, Table, Row, Col } from 'reactstrap'\nimport loadContract from '../../utils/loadContract'\nimport loadWeb3 from '../../utils/loadWeb3'\n\nexport default class ProductDetails extends Component {\n\n    constructor(props) {\n        super(props)\n        console.log(this.props)\n        this.state = {\n            dispensary: null,\n            account: '',\n            product: [],\n            terpenes: [],\n            cannabinoids: []\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            await loadWeb3()\n            const dispensary = await loadContract()\n            const product = await dispensary.methods.fetchProduct(this.props.match.params.productId).call()\n            this.setState({ dispensary, product})\n            await this.getTerpenes()\n            await this.getCannabinoids()\n        } catch(error) {\n            console.log(error)\n        }\n    }\n\n    getTerpenes = async () => {\n        let terpenes = []\n        for(let i = 0; i < this.state.product.productProfile.terpenes.length; i++) {\n            let response = await this.state.dispensary.methods.terpene(this.state.product.productProfile.terpenes[i]).call()\n            terpenes.push(response)\n        }\n        this.setState({ terpenes })\n    }\n\n    getCannabinoids = async () => {\n        let cannabinoids = []\n        for(let i = 0; i < this.state.product.productProfile.cannabinoids.length; i++) {\n            let response = await this.state.dispensary.methods.cannabinoid(this.state.product.productProfile.cannabinoids[i]).call()\n            cannabinoids.push(response)\n        }\n        this.setState({ cannabinoids })\n    }\n\n    render() {\n        return(\n            <div style={{marginTop: '5%', display: 'block'}}>\n                <h1 style={{textAlign: 'center'}}>{this.state.product.name}</h1>\n                <br />\n                <h3 style={{textAlign: 'center'}} >Category: {this.state.product.categoryName}</h3>\n                <br />\n                <h3 style={{textAlign: 'center'}} >Inventory: {this.state.product.quantity}</h3>\n                <br />\n                <h1 style={{textAlign: 'center', marginTop: '5%'}} >Terpenes: </h1>\n                <Table style={{maxWidth: '70%', marginTop: '2%', marginLeft: 'auto', marginRight: 'auto'}} striped>\n                    <thead>\n                        <tr>\n                            <th>\n                                Terpene\n                            </th>\n                            <th>\n                                Concentration\n                            </th>\n                            <th>\n                                Scent\n                            </th>\n                            <th>\n                                Effects\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.terpenes.map((terpene, index) => {\n                            return(\n                                <tr key={terpene.id} >\n                                    <td>\n                                        {terpene.name}\n                                    </td>\n                                    <td>\n                                        {this.state.product.productProfile.terpeneConcentrations[index]}%\n                                    </td>\n                                    <td>\n                                        {terpene.flavorDesc}\n                                    </td>\n                                    <td>\n                                        {terpene.effectDesc}\n                                    </td>\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </Table>\n                <br />\n                <h1 style={{textAlign: 'center'}}>Cannabinoids:</h1>\n                <Table style={{maxWidth: '70%', marginTop: '2%', marginLeft: 'auto', marginRight: 'auto'}} striped>\n                    <thead>\n                        <tr>\n                            <th>\n                                Cannabinoid\n                            </th>\n                            <th>\n                                Concentration\n                            </th>\n                            <th>\n                                Effects\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.cannabinoids.map((cannabinoid, index) => {\n                            return(\n                                <tr key={cannabinoid.id} >\n                                    <td>\n                                        {cannabinoid.name}\n                                    </td>\n                                    <td>\n                                        {this.state.product.productProfile.cannabinoidConcentrations[index]}%\n                                    </td>\n                                    <td>\n                                        {cannabinoid.effectDesc}\n                                    </td>\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </Table>\n            </div>\n        )\n    }\n}","/home/aely/dispensary/src/Components/AddProduct/AddProductRoot.js",[],"/home/aely/dispensary/src/Components/AddProduct/AddTerpenes.js",["216","217"],"import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap'\nimport Terpene from '../ProductDetails/Terpene'\n\nexport default class AddTerpenes extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            terpeneIndex: 0,\n            terpenes: [],\n            concentration: 0,\n            loading: true\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            const terpeneCount = await this.props.dispensary.methods.terpeneCount().call()\n            for(let i = 1; i <= terpeneCount; i++) {\n                const terpene = await this.props.dispensary.methods.terpene(i).call()\n                this.setState({ terpenes: [...this.state.terpenes, terpene]})\n                console.log(terpene)\n            }\n\n            this.setState({ loading: false })\n            console.log(this.state)\n        } catch(error) {\n            this.setState({ loading: false })\n            console.log(error)\n        }\n    }\n\n    addTerpene = () => {\n        let terpenes = this.props.terpenes\n        let index = terpenes.findIndex(x => x === this.state.terpenes[this.state.terpeneIndex].id)\n        if(index < 0) {   \n            this.props.action1(this.state.terpenes[this.state.terpeneIndex].id)\n            this.props.action2(this.state.concentration)\n        }\n        if(index >= 0) {\n            window.alert('Item already added')\n        }\n    }\n\n    handleIndex = async (event) => {\n        let index = this.state.terpenes.filter(prop => {\n            return prop.name.includes(`${event.target.value}`)\n        })\n        await this.setState({\n            terpeneIndex: parseInt(index[0].id) - 1\n        })\n    }\n\n    handleConcentration = (event) => {\n        this.setState({\n            concentration: event.target.value\n        })\n    }\n\n    renderForm() {\n        return(\n            <Form>\n                <FormGroup>\n                    <Label name='terpeneConcentration' id='terpeneConcentration'>Terpene Concentration</Label>\n                    <Input type='number' name='terpeneConcentration' id='terpeneConcentration' onChange={this.handleConcentration} />\n                </FormGroup>\n                <FormGroup>\n                    <Label name='terpene' id='terpene'>Terpene</Label>\n                    <Input type='select' name='terpene' id='terpene' onChange={this.handleIndex}>\n                        {this.state.terpenes.map((terpene) => {\n                            return(\n                                <option key={terpene.id}>{terpene.name}</option>\n                            )\n                        })}\n                    </Input>\n                </FormGroup>\n            </Form>\n        )\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                {this.state.terpenes.length > 0 && this.state.loading === false && \n                <Terpene \n                terpeneIndex={this.state.terpeneIndex} \n                terpene={this.state.terpenes[this.state.terpeneIndex]} \n                />}\n                {this.state.loading === false && this.state.terpenes.length > 0 && this.renderForm()}\n                <Button color='success' style={{float: 'right', marginRight: '10%'}} onClick={this.addTerpene.bind(this)} >Add Terpene</Button>\n            </React.Fragment>\n        )\n    }\n}","/home/aely/dispensary/src/Components/AddProduct/AddLocation.js",["218","219"],"import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap'\n\nexport default class AddLocation extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            locations: [],\n            loading: true,\n            locationIndex: 0\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            const locationCount = await this.props.dispensary.methods.locationCount().call()\n            for(let i = 1; i <= locationCount; i++) {\n                const location = await this.props.dispensary.methods.location(i).call()\n                this.setState({ locations: [...this.state.locations, location]})\n            }\n            this.setState({ loading: false })\n            console.log(this.state)\n        } catch(error) {\n            console.log(error)\n            this.setState({loading: false})\n        }\n    }\n\n    addLocation = () => {\n        let locations = this.props.locations\n        let index = locations.findIndex(x => x === this.state.locations[this.state.locationIndex].id)\n        if(index < 0) {   \n            this.props.action1(this.state.locations[this.state.locationIndex].id)\n        }\n        if(index >= 0) {\n            window.alert('Item already added')\n        }\n    }\n\n    handleLocation = (event) => {\n        let location = this.state.locations.filter(prop => {\n            return prop.nickname.includes(`${event.target.value}`)\n        })\n        console.log(location[0].id)\n    }\n\n    handleIndex = async (event) => {\n        let index = this.state.locations.filter(prop => {\n            return prop.nickname.includes(`${event.target.value}`)\n        })\n        await this.setState({\n            locationIndex: parseInt(index[0].id - 1)\n        })\n    }\n\n    renderForm() {\n        return(\n            <Form>\n                <FormGroup>\n                    <Label name='location' id='location'>Product Type</Label>\n                    <Input type='select' name='location' id='location' onChange={this.handleIndex} >\n                        {this.state.locations.map(location => {\n                            return(\n                            <option key={location.id} >{location.nickname}</option>\n                            )\n                        })}\n                    </Input>\n                    <Button color='success' onClick={this.addLocation.bind(this)}>Add Location</Button>\n                </FormGroup>\n            </Form>\n        )\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                {this.state.loading === false && this.state.locations.length > 0 && this.renderForm()}\n            </React.Fragment>\n        )\n    }\n}","/home/aely/dispensary/src/Components/AddProduct/ProductInfo.js",["220","221","222"],"import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap'\n\nexport default class ProductInfo extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            categories: [],\n            loading: true\n        }\n    }\n\n    async componentDidMount() {\n        try{\n            console.log(this.props)\n            const categoryCount = await this.props.dispensary.methods.categoryCount().call()\n            for(let i = 1; i <= categoryCount; i++) {\n                const category = await this.props.dispensary.methods.category(i).call()\n                this.setState({ categories: [...this.state.categories, category]})\n            }\n            console.log(this.state)\n            this.setState({ loading: false })\n        } catch(error) {\n            console.log(error)\n            this.setState({\n                loading: false\n            })\n        }\n    }\n\n    addProductInfo = () => {\n\n    }\n\n    handleCategory = (event) => {\n        let id = this.state.categories.filter(prop => {\n            return prop.name.includes(`${event.target.value}`)\n        })\n        this.props.action2(id[0].id)\n    }\n\n    handleChange = (event) => {\n        this.props.action1(event.target.value)\n    }\n\n    handleChange2 = (event) => {\n        this.props.action3(event.target.value)\n    }\n\n    handleChange3 = (event) => {\n        this.props.action4(event.target.value)\n    }\n\n    renderForm() {\n        return(\n            <Form>\n                <FormGroup>\n                    <Label name='name' id='name'>Name of Strain</Label>\n                    <Input type='text' name='name' id='name' onChange={this.handleChange} value={this.props.name} />\n                </FormGroup>\n                <FormGroup>\n                    <Label name='cost' id='cost'>Cost Per Gram</Label>\n                    <Input type='number' name='cost' id='cost' onChange={this.handleChange2} value={this.props.cost} />\n                </FormGroup>\n                <FormGroup>\n                    <Label name='quantity' id='quantity'>Grams Available</Label>\n                    <Input type='number' name='quantity' id='quantity' onChange={this.handleChange3} value={this.props.quantity} />\n                </FormGroup>\n                <FormGroup>\n                    <Label name='category' id='category'>Product Category</Label>\n                    <Input type='select' name='category' id='category' onChange={this.handleCategory} >\n                        {this.state.categories.map(category => {\n                            return(\n                                <option key={category.id} >{category.name}</option>\n                            )\n                        })}\n                    </Input>\n                </FormGroup>\n            </Form>\n        )\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                {this.state.loading === false && this.state.categories.length > 0 && this.renderForm()}\n            </React.Fragment>\n        )\n    }\n}","/home/aely/dispensary/src/Components/AddProduct/AddCannabinoids.js",["223","224","225"],"import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap'\nimport Cannabinoid from '../ProductDetails/Cannabinoid'\nimport loadWeb3 from '../../utils/loadWeb3'\n\nexport default class AddCannabinoids extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            cannabinoidIndex: 0,\n            cannabinoids: [],\n            cannabinoidConcentration: 0\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            const cannabinoidCount = await this.props.dispensary.methods.cannabinoidCount().call()\n            for(let i = 1; i <= cannabinoidCount; i++) {\n                const cannabinoid = await this.props.dispensary.methods.cannabinoid(i).call()\n                this.setState({ cannabinoids: [...this.state.cannabinoids, cannabinoid]})\n            }\n            this.setState({ loading: false })\n            console.log(this.state)\n        } catch(error) {\n            console.log(error)\n            this.setState({loading: false})\n        }\n    }\n\n    addCannabinoid = () => {\n        let cannabinoids = this.props.cannabinoids\n        let index = cannabinoids.findIndex(x => x === this.state.cannabinoids[this.state.cannabinoidIndex].id)\n        if(index < 0) {\n            this.props.action1(this.state.cannabinoids[this.state.cannabinoidIndex].id)\n            this.props.action2(this.state.concentration)\n        }\n        if(index >= 0) {\n            window.alert('Item already added')\n        }\n    }\n\n    handleConcentration = (event) => {\n        this.setState({\n            concentration: event.target.value\n        })\n    }\n\n    handleIndex = async (event) => {\n        let index = this.state.cannabinoids.filter(prop => {\n            return prop.name.includes(`${event.target.value}`)\n        })\n        await this.setState({\n            cannabinoidIndex: parseInt(index[0].id - 1)\n        })\n    }\n\n    renderForm() {\n        return(\n            <Form>\n                <FormGroup>\n                    <Label name='terpeneConcentration' id='terpeneConcentration'>Cannabinoid Concentration</Label>\n                    <Input type='number' name='terpeneConcentration' id='terpeneConcentration' onChange={this.handleConcentration} />\n                </FormGroup>\n                <FormGroup>\n                    <Label name='terpene' id='terpene'>Cannabinoid</Label>\n                    <Input type='select' name='terpene' id='terpene' onChange={this.handleIndex}>\n                        {this.state.cannabinoids.map((cannabinoid) => {\n                            return(\n                                <option key={cannabinoid.id} >{cannabinoid.name}</option>\n                            )\n                        })}\n                    </Input>\n                </FormGroup>\n            </Form>\n        )\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                {this.state.cannabinoids.length > 0 && this.state.loading === false && <Cannabinoid cannabinoidIndex={this.state.cannabinoidIndex} cannabinoid={this.state.cannabinoids[this.state.cannabinoidIndex]} />}\n                {this.state.cannabinoids.length > 0 && this.state.loading === false && this.renderForm()}\n                <Button style={{float: 'right', marginRight: '10%'}} color='success' onClick={this.addCannabinoid.bind(this)} >Add Cannabinoid</Button>\n            </React.Fragment>\n        )\n    }\n}","/home/aely/dispensary/src/utils/loadContract.js",[],"/home/aely/dispensary/src/Components/ProductDetails/Cannabinoid.js",["226","227","228"],"import React, { Component } from 'react'\nimport { Button, Table, Row, Col } from 'reactstrap'\n\n\nexport default class Cannabinoids extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true\n        }\n    }\n\n    render() {\n        return(\n            <Table style={{maxWidth: '70%', marginTop: '2%', marginLeft: 'auto', marginRight: 'auto'}} striped>\n                <thead>\n                    <tr>\n                        <th>\n                            Cannabinoid\n                        </th>\n                        <th>\n                            Effects\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>\n                            {this.props.cannabinoid.name}\n                        </td>\n                        <td>\n                            {this.props.cannabinoid.effectDesc}\n                        </td>\n                    </tr>                        \n                </tbody>\n            </Table>\n        )\n    }\n}","/home/aely/dispensary/src/Components/ProductDetails/Terpene.js",["229","230","231"],"import React, { Component } from 'react'\nimport { Button, Table, Row, Col } from 'reactstrap'\n\n\nexport default class Terpenes extends Component {\n\n    constructor(props) {\n        super(props)\n        console.log(this.props)\n        this.state = {\n            loading: true\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            this.setState({ loading: false })\n        } catch(error) {\n            this.setState({\n                loading: false\n            })\n            console.log(error)\n        }\n    }\n\n    renderTable() {\n        return(\n            <Table style={{maxWidth: '70%', marginTop: '2%', marginLeft: 'auto', marginRight: 'auto'}} striped>\n                <thead>\n                    <tr>\n                        <th>\n                            Terpene\n                        </th>\n                        <th>\n                            Scent\n                        </th>\n                        <th>\n                            Effects\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>\n                            {this.props.terpene.name}\n                        </td>\n                        <td>\n                            {this.props.terpene.flavorDesc}\n                        </td>\n                        <td>\n                            {this.props.terpene.effectDesc}\n                        </td>\n                    </tr>                        \n                </tbody>\n            </Table>\n        )\n    }\n\n    render() {\n        return(\n                <React.Fragment>\n                    {this.state.loading === false && this.renderTable()}\n                </React.Fragment>\n        )\n    }\n}","/home/aely/dispensary/src/Components/CreateLocation.js",["232","233","234"],"import React, { Component } from 'react'\nimport { Form, Col, Row, Table, Button, FormGroup, Label, Input } from 'reactstrap'\nimport loadWeb3 from '../utils/loadWeb3'\nimport loadAccount from '../utils/loadAccount'\nimport loadContract from '../utils/loadContract'\n\nexport default class CreateLocation extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            streetAddress: '',\n            state: '',\n            zip: '',\n            city: '',\n            taxRate: 0,\n            nickname: '',\n            loading: true,\n            account: ''\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            await loadWeb3()\n            const account = await loadAccount()\n            const dispensary = await loadContract()\n            this.setState({ account, dispensary, loading: false })\n            console.log(this.state)\n\n        } catch(error) {\n            this.setState({ loading: false })\n            console.log(error)\n        }\n    }\n\n    createLocation = async () => {\n        try {\n            this.setState({ loading: true })\n            console.log('good here')\n            await this.state.dispensary.methods.createLocation(this.state.taxRate, this.state.nickname, this.state.streetAddress, this.state.city, this.state.state, this.state.zip).send({ from: this.state.account })\n            console.log('good after creation')\n            this.setState({ loading: false })\n        } catch(error) {\n            console.log(error)\n            this.setState({ loading: false })\n        }\n    }\n\n    handleNickname = (event) => {\n        this.setState({\n            nickname: event.target.value\n        })\n    }\n\n    handleStreet = (event) => {\n        this.setState({\n            streetAddress: event.target.value\n        })\n    }\n\n    handleCity = (event) => {\n        this.setState({\n            city: event.target.value\n        })\n    }\n\n    handleState = (event) => {\n        this.setState({\n            state: event.target.value\n        })\n    }\n\n    handleZip = (event) => {\n        this.setState({\n            zip: event.target.value\n        })\n    }\n\n    handleTax = (event) => {\n        this.setState({\n            taxRate: event.target.value\n        })\n    }\n\n    renderForm() {\n        return(\n            <Form>\n                <FormGroup>\n                    <Label name='nickname' id='nickname'>Nickname of Location</Label>\n                    <Input type='text' name='nickname' id='nickname' onChange={this.handleNickname} value={this.state.nickname} />\n                </FormGroup>\n                <FormGroup>\n                    <Label name='street' id='street'>Street Address</Label>\n                    <Input type='text' name='street' id='street' onChange={this.handleStreet} value={this.state.streetAddress} />\n                </FormGroup>\n                <FormGroup>\n                    <Label name='city' id='city'>City</Label>\n                    <Input type='text' name='city' id='city' onChange={this.handleCity} value={this.state.city} />\n                </FormGroup>\n                <FormGroup>\n                    <Label name='state' id='state'>State</Label>\n                    <Input type='text' name='state' id='state' onChange={this.handleState} value={this.state.state} />\n                </FormGroup>\n                <FormGroup>\n                    <Label name='zip' id='zip'>Zip Code</Label>\n                    <Input type='text' name='zip' id='zip' onChange={this.handleZip} value={this.state.zip} />\n                </FormGroup>\n                <FormGroup>\n                    <Label name='tax' id='tax'>Tax Rate for Location</Label>\n                    <Input type='number' name='tax' id='tax' onChange={this.handleTax} value={this.state.taxRate} />\n                </FormGroup>\n            </Form>\n        )\n    }\n\n    render() {\n        return(\n            <div>\n                {this.state.loading === false && this.renderForm()}\n                <Button color='success' onClick={this.createLocation}>Create Location</Button>\n            </div>\n        )\n    }\n}","/home/aely/dispensary/src/Components/CreateTerpene.js",["235","236","237"],"import React, { Component } from 'react'\nimport { Form, Col, Row, Table, Button, FormGroup, Label, Input } from 'reactstrap'\nimport loadWeb3 from '../utils/loadWeb3'\nimport loadAccount from '../utils/loadAccount'\nimport loadContract from '../utils/loadContract'\n\nexport default class CreateTerpene extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            terpeneName: '',\n            flavorDesc: '',\n            effectDesc: '',\n            loading: true,\n            account: ''\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            await loadWeb3()\n            const account = await loadAccount()\n            const dispensary = await loadContract()\n            this.setState({ account, dispensary, loading: false })\n            console.log(this.state)\n\n        } catch(error) {\n            this.setState({ loading: false })\n            console.log(error)\n        }\n    }\n\n    createTerpene = async () => {\n        try {\n            this.setState({ loading: true })\n            await this.state.dispensary.methods.createTerpene(this.state.terpeneName, this.state.flavorDesc, this.state.effectDesc).send({ from: this.state.account })\n            this.setState({ loading: false })\n        } catch(error) {\n            console.log(error)\n            this.setState({ loading: false })\n        }\n    }\n\n    handleName = (event) => {\n        this.setState({\n            terpeneName: event.target.value\n        })\n    }\n\n    handleDesc = (event) => {\n        this.setState({\n            effectDesc: event.target.value\n        })\n    }\n\n    handleFlavor = (event) => {\n        this.setState({\n            flavorDesc: event.target.value\n        })\n    }\n\n    renderForm() {\n        return(\n            <Form>\n                <FormGroup>\n                    <Label name='name' id='name'>Name of Terpene</Label>\n                    <Input type='text' name='name' id='name' onChange={this.handleNickname} value={this.state.nickname} />\n                </FormGroup>\n                <FormGroup>\n                    <Label name='desc' id='desc'>Description of Terpene Flavor</Label>\n                    <Input type='text' name='desc' id='desc' onChange={this.handleFlavor} value={this.state.flavorDesc} />\n                </FormGroup>\n                <FormGroup>\n                    <Label name='desc' id='desc'>Description of Terpene Effect</Label>\n                    <Input type='text' name='desc' id='desc' onChange={this.handleDesc} value={this.state.effectDesc} />\n                </FormGroup>\n            </Form>\n        )\n    }\n\n    render() {\n        return(\n            <div>\n                {this.state.loading === false && this.renderForm()}\n                <Button color='success' onClick={this.createTerpene}>Create Terpene</Button>\n            </div>\n        )\n    }\n}","/home/aely/dispensary/src/Components/CreateCannabinoid.js",["238","239","240"],"import React, { Component } from 'react'\nimport { Form, Col, Row, Table, Button, FormGroup, Label, Input } from 'reactstrap'\nimport loadWeb3 from '../utils/loadWeb3'\nimport loadAccount from '../utils/loadAccount'\nimport loadContract from '../utils/loadContract'\n\nexport default class CreateCannabinoid extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            cannabinoidName: '',\n            cannabinoidDesc: '',\n            loading: true,\n            account: ''\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            await loadWeb3()\n            const account = await loadAccount()\n            const dispensary = await loadContract()\n            this.setState({ account, dispensary, loading: false })\n            console.log(this.state)\n\n        } catch(error) {\n            this.setState({ loading: false })\n            console.log(error)\n        }\n    }\n\n    createCannabinoid = async () => {\n        try {\n            this.setState({ loading: true })\n            await this.state.dispensary.methods.createCannabinoid(this.state.cannabinoidName, this.state.cannabinoidDesc).send({ from: this.state.account })\n            this.setState({ loading: false })\n        } catch(error) {\n            console.log(error)\n            this.setState({ loading: false })\n        }\n    }\n\n    handleName = (event) => {\n        this.setState({\n            cannabinoidName: event.target.value\n        })\n    }\n\n    handleDesc = (event) => {\n        this.setState({\n            cannabinoidDesc: event.target.value\n        })\n    }\n\n    renderForm() {\n        return(\n            <Form>\n                <FormGroup>\n                    <Label name='name' id='name'>Name of Cannabinoid</Label>\n                    <Input type='text' name='name' id='name' onChange={this.handleName} value={this.state.cannabinoidName} />\n                </FormGroup>\n                <FormGroup>\n                    <Label name='desc' id='desc'>Description of Cannabinoid</Label>\n                    <Input type='text' name='desc' id='desc' onChange={this.handleDesc} value={this.state.cannabinoidDesc} />\n                </FormGroup>\n            </Form>\n        )\n    }\n\n    render() {\n        return(\n            <div>\n                {this.state.loading === false && this.renderForm()}\n                <Button color='success' onClick={this.createCannabinoid}>Create Cannabinoid</Button>\n            </div>\n        )\n    }\n}","/home/aely/dispensary/src/Components/Purchases.js",["241","242","243","244"],"import React, { Component } from 'react'\nimport loadWeb3 from '../utils/loadWeb3'\nimport Loader from './Loader'\nimport { Button, Card, CardTitle, CardText, Row, Col } from 'reactstrap'\nimport ReceiptDetails from './ReceiptDetails'\nimport Bitcoin from '../Images/Bitcoin.jpg'\nimport Ethereum from '../Images/Ethereum.jpg'\nimport getLiveETHUSD from '../queries/getLiveETHUSD'\nimport loadContract from '../utils/loadContract'\nimport loadAccount from '../utils/loadAccount'  \n\n\nexport default class Purchases extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            dispensary: null,\n            ethUSD: 0,\n            account: '',\n            receipts: [],\n            tabId: 0,\n            loading: true\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            await loadWeb3();\n            const account = await loadAccount()\n            const dispensary = await loadContract();\n            this.setState({ account, dispensary })\n            const purchases = await dispensary.methods.getReceipts(account).call()\n            for(let i = 0; i < purchases.length; i++) {\n                const receipt = await dispensary.methods.fetchReceipt(purchases[i]).call()\n                this.setState({ receipts: [...this.state.receipts, receipt]})\n            }\n\n            this.setState({ loading: false })\n            console.log(this.state)\n            /*const ethUSD = await getLiveETHUSD();\n            this.setState({\n                ethUSD,\n                loading: false\n            })*/\n        }\n        catch(error) {\n            console.log(error);\n            this.setState({\n                loading: false\n            })\n        }\n    }\n\n    incrementTab = () => {\n        this.setState({ tabId: this.state.tabId + 1})\n        setTimeout(() => { this.getProduct(this.state.tabId); }, 10);\n    }\n\n    decrementTab = () => {\n        this.setState({ tabId: this.state.tabId - 1})\n        setTimeout(() => { this.getProduct(this.state.tabId); }, 10);\n\n    }\n\n    getProduct = async (productList) => {\n        for(let i = 0; i < productList.length; i++) {\n            const product = await this.state.dispensary.fetchProduct(productList[i]).call()\n            return product\n        }\n    }\n\n    renderReceipts() {\n        return(\n            <div>\n                {this.state.receipts.map((a, index) => {\n                    return(\n                        <Row style={{display: 'inline-block', marginLeft: '10%', marginRight: '10%'}} key={a._receipt.id} >\n                            <Col sm=\"20\">\n                                <Card body>\n\n                                    <CardTitle style={{textAlign: 'center'}} >Purchase #{index + 1}</CardTitle>\n                                    \n                                    <CardText>Total before tax: ${a._receipt.rawTotal}</CardText>\n                                    \n                                    <CardText>Tax: ${a._receipt.amountTax}</CardText>\n                                    \n                                    <CardText>Total: ${a._receipt.amountTotal}</CardText>\n                                    \n                                    <ReceiptDetails dispensary={this.state.dispensary} products={a._receipt.products} quantities={a._receipt.quantities} />\n\n                                </Card>\n                            </Col>\n                        </Row>\n                    )\n                })}\n            </div>\n        )\n    }\n\n    renderNoPurchases() {\n        return(\n            <div> You have not made any purchases yet.</div>\n        )\n    }\n    \n    render() {\n          return(\n            <div style={{marginTop: '5%', textAlign: 'center'}}>\n                {this.state.loading === false && this.state.receipts.length > 0 && this.renderReceipts()}\n                {this.state.loading === false && this.state.receipts.length === 0 && this.renderNoPurchases()}\n                {this.state.loading === true && <Loader />}\n            </div>\n        )\n    }\n}","/home/aely/dispensary/src/utils/loadContract-old.js",[],"/home/aely/dispensary/src/Components/ReceiptDetails.js",[],"/home/aely/dispensary/src/Components/MyNavbar.js",["245","246","247","248","249"],"import React, { Component } from 'react'\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    NavbarText\n  } from 'reactstrap'\n\n  export default class MyNavbar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.toggleNavbar = this.toggleNavbar.bind(this)\n        this.state = {\n            isOpen: false\n        }\n    }\n\n    toggleNavbar() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        })\n    }\n\n    render() {\n        return(\n            <Navbar color='dark' light expand='xl' >\n                <NavbarBrand style={{color: 'rgb(0, 255, 34)'}} className='mr-auto' href=\"/dashboard\">Company Name\n                        \n                </NavbarBrand>\n                    <NavbarToggler onClick={this.toggleNavbar} />\n                        <Collapse isOpen={this.state.isOpen} navbar>\n                            <Nav className='ml-auto' navbar>\n                                <NavItem>\n                                    <NavLink href=\"/products\" style={{color: 'rgb(0, 255, 34)'}} >Products</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink href=\"/mypurchases\" style={{color: 'rgb(0, 255, 34)'}} >My Purchases</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink href=\"/addproduct\" style={{color: 'rgb(0, 255, 34)'}} >Add New Product</NavLink>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n            </Navbar>\n        )\n    }\n  }",{"ruleId":"250","severity":1,"message":"251","line":10,"column":3,"nodeType":"252","messageId":"253","endLine":10,"endColumn":7},{"ruleId":"250","severity":1,"message":"254","line":11,"column":3,"nodeType":"252","messageId":"253","endLine":11,"endColumn":11},{"ruleId":"250","severity":1,"message":"255","line":12,"column":3,"nodeType":"252","messageId":"253","endLine":12,"endColumn":17},{"ruleId":"250","severity":1,"message":"256","line":13,"column":3,"nodeType":"252","messageId":"253","endLine":13,"endColumn":17},{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","replacedBy":"260"},{"ruleId":"250","severity":1,"message":"261","line":4,"column":3,"nodeType":"252","messageId":"253","endLine":4,"endColumn":13},{"ruleId":"250","severity":1,"message":"251","line":5,"column":3,"nodeType":"252","messageId":"253","endLine":5,"endColumn":7},{"ruleId":"250","severity":1,"message":"254","line":6,"column":3,"nodeType":"252","messageId":"253","endLine":6,"endColumn":11},{"ruleId":"250","severity":1,"message":"255","line":7,"column":3,"nodeType":"252","messageId":"253","endLine":7,"endColumn":17},{"ruleId":"250","severity":1,"message":"256","line":8,"column":3,"nodeType":"252","messageId":"253","endLine":8,"endColumn":17},{"ruleId":"250","severity":1,"message":"262","line":2,"column":8,"nodeType":"252","messageId":"253","endLine":2,"endColumn":12},{"ruleId":"250","severity":1,"message":"263","line":15,"column":8,"nodeType":"252","messageId":"253","endLine":15,"endColumn":18},{"ruleId":"264","severity":1,"message":"265","line":89,"column":21,"nodeType":"266","endLine":89,"endColumn":78},{"ruleId":"264","severity":1,"message":"265","line":91,"column":21,"nodeType":"266","endLine":91,"endColumn":74},{"ruleId":"257","replacedBy":"267"},{"ruleId":"259","replacedBy":"268"},{"ruleId":"250","severity":1,"message":"269","line":2,"column":10,"nodeType":"252","messageId":"253","endLine":2,"endColumn":16},{"ruleId":"250","severity":1,"message":"270","line":2,"column":18,"nodeType":"252","messageId":"253","endLine":2,"endColumn":22},{"ruleId":"250","severity":1,"message":"271","line":2,"column":24,"nodeType":"252","messageId":"253","endLine":2,"endColumn":33},{"ruleId":"250","severity":1,"message":"272","line":2,"column":35,"nodeType":"252","messageId":"253","endLine":2,"endColumn":40},{"ruleId":"250","severity":1,"message":"273","line":2,"column":42,"nodeType":"252","messageId":"253","endLine":2,"endColumn":47},{"ruleId":"250","severity":1,"message":"274","line":2,"column":25,"nodeType":"252","messageId":"253","endLine":2,"endColumn":31},{"ruleId":"250","severity":1,"message":"270","line":2,"column":18,"nodeType":"252","messageId":"253","endLine":2,"endColumn":22},{"ruleId":"250","severity":1,"message":"271","line":2,"column":24,"nodeType":"252","messageId":"253","endLine":2,"endColumn":33},{"ruleId":"250","severity":1,"message":"272","line":2,"column":35,"nodeType":"252","messageId":"253","endLine":2,"endColumn":40},{"ruleId":"250","severity":1,"message":"273","line":2,"column":42,"nodeType":"252","messageId":"253","endLine":2,"endColumn":47},{"ruleId":"264","severity":1,"message":"265","line":106,"column":17,"nodeType":"266","endLine":106,"endColumn":60},{"ruleId":"264","severity":1,"message":"265","line":155,"column":21,"nodeType":"266","endLine":155,"endColumn":64},{"ruleId":"250","severity":1,"message":"262","line":1,"column":8,"nodeType":"252","messageId":"253","endLine":1,"endColumn":12},{"ruleId":"250","severity":1,"message":"262","line":1,"column":8,"nodeType":"252","messageId":"253","endLine":1,"endColumn":12},{"ruleId":"250","severity":1,"message":"275","line":2,"column":18,"nodeType":"252","messageId":"253","endLine":2,"endColumn":21},{"ruleId":"250","severity":1,"message":"276","line":2,"column":23,"nodeType":"252","messageId":"253","endLine":2,"endColumn":26},{"ruleId":"250","severity":1,"message":"270","line":2,"column":18,"nodeType":"252","messageId":"253","endLine":2,"endColumn":22},{"ruleId":"250","severity":1,"message":"271","line":2,"column":24,"nodeType":"252","messageId":"253","endLine":2,"endColumn":33},{"ruleId":"250","severity":1,"message":"272","line":2,"column":35,"nodeType":"252","messageId":"253","endLine":2,"endColumn":40},{"ruleId":"250","severity":1,"message":"273","line":2,"column":42,"nodeType":"252","messageId":"253","endLine":2,"endColumn":47},{"ruleId":"250","severity":1,"message":"275","line":2,"column":49,"nodeType":"252","messageId":"253","endLine":2,"endColumn":52},{"ruleId":"250","severity":1,"message":"276","line":2,"column":54,"nodeType":"252","messageId":"253","endLine":2,"endColumn":57},{"ruleId":"250","severity":1,"message":"277","line":2,"column":59,"nodeType":"252","messageId":"253","endLine":2,"endColumn":63},{"ruleId":"250","severity":1,"message":"278","line":2,"column":65,"nodeType":"252","messageId":"253","endLine":2,"endColumn":74},{"ruleId":"250","severity":1,"message":"279","line":2,"column":76,"nodeType":"252","messageId":"253","endLine":2,"endColumn":84},{"ruleId":"250","severity":1,"message":"269","line":2,"column":10,"nodeType":"252","messageId":"253","endLine":2,"endColumn":16},{"ruleId":"250","severity":1,"message":"275","line":2,"column":25,"nodeType":"252","messageId":"253","endLine":2,"endColumn":28},{"ruleId":"250","severity":1,"message":"276","line":2,"column":30,"nodeType":"252","messageId":"253","endLine":2,"endColumn":33},{"ruleId":"250","severity":1,"message":"275","line":2,"column":49,"nodeType":"252","messageId":"253","endLine":2,"endColumn":52},{"ruleId":"250","severity":1,"message":"276","line":2,"column":54,"nodeType":"252","messageId":"253","endLine":2,"endColumn":57},{"ruleId":"250","severity":1,"message":"275","line":2,"column":49,"nodeType":"252","messageId":"253","endLine":2,"endColumn":52},{"ruleId":"250","severity":1,"message":"276","line":2,"column":54,"nodeType":"252","messageId":"253","endLine":2,"endColumn":57},{"ruleId":"250","severity":1,"message":"269","line":2,"column":10,"nodeType":"252","messageId":"253","endLine":2,"endColumn":16},{"ruleId":"250","severity":1,"message":"275","line":2,"column":49,"nodeType":"252","messageId":"253","endLine":2,"endColumn":52},{"ruleId":"250","severity":1,"message":"276","line":2,"column":54,"nodeType":"252","messageId":"253","endLine":2,"endColumn":57},{"ruleId":"250","severity":1,"message":"275","line":2,"column":49,"nodeType":"252","messageId":"253","endLine":2,"endColumn":52},{"ruleId":"250","severity":1,"message":"276","line":2,"column":54,"nodeType":"252","messageId":"253","endLine":2,"endColumn":57},{"ruleId":"250","severity":1,"message":"280","line":4,"column":8,"nodeType":"252","messageId":"253","endLine":4,"endColumn":16},{"ruleId":"250","severity":1,"message":"269","line":2,"column":10,"nodeType":"252","messageId":"253","endLine":2,"endColumn":16},{"ruleId":"250","severity":1,"message":"275","line":2,"column":25,"nodeType":"252","messageId":"253","endLine":2,"endColumn":28},{"ruleId":"250","severity":1,"message":"276","line":2,"column":30,"nodeType":"252","messageId":"253","endLine":2,"endColumn":33},{"ruleId":"250","severity":1,"message":"269","line":2,"column":10,"nodeType":"252","messageId":"253","endLine":2,"endColumn":16},{"ruleId":"250","severity":1,"message":"275","line":2,"column":25,"nodeType":"252","messageId":"253","endLine":2,"endColumn":28},{"ruleId":"250","severity":1,"message":"276","line":2,"column":30,"nodeType":"252","messageId":"253","endLine":2,"endColumn":33},{"ruleId":"250","severity":1,"message":"276","line":2,"column":16,"nodeType":"252","messageId":"253","endLine":2,"endColumn":19},{"ruleId":"250","severity":1,"message":"275","line":2,"column":21,"nodeType":"252","messageId":"253","endLine":2,"endColumn":24},{"ruleId":"250","severity":1,"message":"281","line":2,"column":26,"nodeType":"252","messageId":"253","endLine":2,"endColumn":31},{"ruleId":"250","severity":1,"message":"276","line":2,"column":16,"nodeType":"252","messageId":"253","endLine":2,"endColumn":19},{"ruleId":"250","severity":1,"message":"275","line":2,"column":21,"nodeType":"252","messageId":"253","endLine":2,"endColumn":24},{"ruleId":"250","severity":1,"message":"281","line":2,"column":26,"nodeType":"252","messageId":"253","endLine":2,"endColumn":31},{"ruleId":"250","severity":1,"message":"276","line":2,"column":16,"nodeType":"252","messageId":"253","endLine":2,"endColumn":19},{"ruleId":"250","severity":1,"message":"275","line":2,"column":21,"nodeType":"252","messageId":"253","endLine":2,"endColumn":24},{"ruleId":"250","severity":1,"message":"281","line":2,"column":26,"nodeType":"252","messageId":"253","endLine":2,"endColumn":31},{"ruleId":"250","severity":1,"message":"269","line":4,"column":10,"nodeType":"252","messageId":"253","endLine":4,"endColumn":16},{"ruleId":"250","severity":1,"message":"282","line":6,"column":8,"nodeType":"252","messageId":"253","endLine":6,"endColumn":15},{"ruleId":"250","severity":1,"message":"283","line":7,"column":8,"nodeType":"252","messageId":"253","endLine":7,"endColumn":16},{"ruleId":"250","severity":1,"message":"284","line":8,"column":8,"nodeType":"252","messageId":"253","endLine":8,"endColumn":21},{"ruleId":"250","severity":1,"message":"285","line":10,"column":5,"nodeType":"252","messageId":"253","endLine":10,"endColumn":25},{"ruleId":"250","severity":1,"message":"286","line":11,"column":5,"nodeType":"252","messageId":"253","endLine":11,"endColumn":19},{"ruleId":"250","severity":1,"message":"287","line":12,"column":5,"nodeType":"252","messageId":"253","endLine":12,"endColumn":17},{"ruleId":"250","severity":1,"message":"288","line":13,"column":5,"nodeType":"252","messageId":"253","endLine":13,"endColumn":17},{"ruleId":"250","severity":1,"message":"289","line":14,"column":5,"nodeType":"252","messageId":"253","endLine":14,"endColumn":15},"no-unused-vars","'atom' is defined but never used.","Identifier","unusedVar","'selector' is defined but never used.","'useRecoilState' is defined but never used.","'useRecoilValue' is defined but never used.","no-native-reassign",["290"],"no-negated-in-lhs",["291"],"'RecoilRoot' is defined but never used.","'Web3' is defined but never used.","'Dispensary' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["290"],["291"],"'Button' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'Legend' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Card' is defined but never used.","'CardTitle' is defined but never used.","'CardText' is defined but never used.","'loadWeb3' is defined but never used.","'Table' is defined but never used.","'Bitcoin' is defined but never used.","'Ethereum' is defined but never used.","'getLiveETHUSD' is defined but never used.","'UncontrolledDropdown' is defined but never used.","'DropdownToggle' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'NavbarText' is defined but never used.","no-global-assign","no-unsafe-negation"]